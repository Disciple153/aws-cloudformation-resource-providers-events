Parameters:
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from datetime import datetime
          def lambda_handler(event, context):

            statusCode = '200'

            print('hello')

            return {
                'statusCode': statusCode,
                'body': str(datetime.now()),
                'isBase64Encoded':  False
            }
      Role:
        Fn::GetAtt:
          - functionServiceRole
          - Arn
      Handler: test_function.lambda_handler
      Runtime: python3.9

  functionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  adminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  basicVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: stack
        Value: production

  basicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref basicVpc
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  basicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref basicVpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  batchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: batch.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  batchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ReplaceComputeEnvironment: true
      ServiceRole: 
        Fn::GetAtt:
          - batchServiceRole
          - Arn
      State: ENABLED
      Type: MANAGED
      ComputeResources:
        MaxvCpus: 1
        Subnets: 
          - !Ref basicSubnet
        Type: FARGATE
        UpdateToLatestImageVersion: false
        SecurityGroupIds:
          - !Ref basicSecurityGroup

  batchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref batchComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED

  batchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Command:
          - echo success
        Image: ubuntu
        ResourceRequirements:
          - Type: VCPU
            Value: '1'
          - Type: MEMORY
            Value: '4096'

  sqsQueue:
    Type: AWS::SQS::Queue

  
  sqsQueueFifo:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true

  basicLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref LatestAmiId

  basicAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref basicLaunchTemplate
        Version: !GetAtt basicLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1' 
      VPCZoneIdentifier: 
        - !Ref basicSubnet

  ecsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref basicAutoScalingGroup

  ecsTaskDefinition: # must use awsvpc network mode
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: ubuntu
          Name: test-task
          Memory: 4096

  ecsClusterEc2:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - !Ref ecsCapacityProvider

  ecsClusterFargate:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE

  apiGatewayApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: testApi

  apiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt apiGatewayApi.RootResourceId
      PathPart: '{parameter}'
      RestApiId: !Ref apiGatewayApi

  apiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt function.Arn
      ResourceId: !Ref apiGatewayResource
      RestApiId: !Ref apiGatewayApi

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayMethod
    Properties:
      RestApiId: !Ref apiGatewayApi
      StageName: test

  kinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1

  secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: dependencysecret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "masteruser"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
        ExcludePunctuation: true

  redshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn:
      - secret
    Properties:
      DBName: testdb
      MasterUsername: '{{resolve:secretsmanager:dependencysecret:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:dependencysecret:SecretString:password}}'
      NodeType: ds2.xlarge
      ClusterType: single-node

  ec2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      
  runCommand: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run a script on Linux instances.'
        mainSteps:
        - action: aws:runShellScript
          name: runCommands
          inputs:
            timeoutSeconds: '60'
            runCommand:
            - echo Hello World
      DocumentFormat: YAML
      DocumentType: Command
      Name: 'CFN_2.2_command_example'

  sageMakerPipeline:
    Type: AWS::SageMaker::Pipeline
    Properties:
      PipelineName: testPipeline
      PipelineDefinition:
        PipelineDefinitionBody: "{\"Version\":\"2020-12-01\",\"Parameters\":[{\"Name\":\"InputDataSource\",\"DefaultValue\":\"\"},{\"Name\":\"InstanceCount\",\"Type\":\"Integer\",\"DefaultValue\":1}],\"Steps\":[{\"Name\":\"Training1\",\"Type\":\"Training\",\"Arguments\":{\"InputDataConfig\":[{\"DataSource\":{\"S3DataSource\":{\"S3Uri\":{\"Get\":\"Parameters.InputDataSource\"}}}}],\"OutputDataConfig\":{\"S3OutputPath\":\"s3://my-s3-bucket/\"},\"ResourceConfig\":{\"InstanceType\":\"ml.m5.large\",\"InstanceCount\":{\"Get\":\"Parameters.InstanceCount\"},\"VolumeSizeInGB\":1024}}}]}"
      RoleArn: !GetAtt adminRole.Arn

Outputs:
  Bucket:
    Value: !Ref bucket
    Export:
      Name: awseventsrulecto1

  LambdaArn:
    Value: !GetAtt function.Arn
    Export:
      Name: awseventsrulecto2

  RoleArn:
    Value: !GetAtt adminRole.Arn
    Export:
      Name: awseventsrulecto3

  BatchJobDefinitionArn:
    Value: !Ref batchJobDefinition
    Export:
      Name: awseventsrulecto4

  BatchJobQueueArn:
    Value: !Ref batchJobQueue
    Export:
      Name: awseventsrulecto5

  sqsQueueArn:
    Value: !GetAtt sqsQueue.Arn
    Export:
      Name: awseventsrulecto6

  BasicSecurityGroupGroupArn:
    Value: !Sub
      - 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroupId}'
      - SecurityGroupId: !Ref basicSecurityGroup
    Export:
      Name: awseventsrulecto7

  BasicSubnetId:
    Value: !Ref basicSubnet
    Export:
      Name: awseventsrulecto8

  ecsCapacityProviderName:
    Value: !Ref ecsCapacityProvider
    Export:
      Name: awseventsrulecto9

  ecsTaskDefinitionArn:
    Value: !Ref ecsTaskDefinition
    Export:
      Name: awseventsrulecto10

  ecsClusterEc2Arn:
    Value: !GetAtt ecsClusterEc2.Arn
    Export:
      Name: awseventsrulecto11

  ecsClusterFargateArn:
    Value: !GetAtt ecsClusterFargate.Arn
    Export:
      Name: awseventsrulecto12

  apiGatewayArn:
    Value: !Sub
      - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGatewayApi}/${apiGatewayDeployment}/POST/*'
      - apiGatewayApi: !Ref apiGatewayApi
        apiGatewayDeployment: !Ref apiGatewayDeployment
    Export:
      Name: awseventsrulecto13

  kinesisStreamArn:
    Value: !GetAtt kinesisStream.Arn
    Export:
      Name: awseventsrulecto14

  secret:
    Value: !Ref secret
    Export:
      Name: awseventsrulecto15

  redshiftArn:
    Value: !Sub
      - 'arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${clusterName}'
      - clusterName: !Ref redshiftCluster
    Export:
      Name: awseventsrulecto16

  ec2InstanceId:
    Value: !Ref ec2Instance
    Export:
      Name: awseventsrulecto17

  runCommandArn:
    Value: !Sub 
      - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${documentName}'
      - documentName: !Ref runCommand
    Export:
      Name: awseventsrulecto18

  sageMakerPipelineArn:
    Value:  !Sub 
      - 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:pipeline/${pipelineId}'
      - pipelineId: !Ref sageMakerPipeline
    Export:
      Name: awseventsrulecto19


  sqsQueueFifoArn:
    Value: !GetAtt sqsQueueFifo.Arn
    Export:
      Name: awseventsrulecto20